---
import { getEnv } from '../lib/env'
import { getSocialLinks } from '../lib/social-links'
import voidFile from '../assets/void.png'

const { BASE_URL } = Astro.locals
const { channel } = Astro.props

const staticProxy = getEnv(import.meta.env, Astro, 'STATIC_PROXY') ?? '/static/'
const socialLinks = getSocialLinks(import.meta.env, Astro)
const hasSocialLinks = socialLinks.length > 0
const hasDescription = typeof channel?.descriptionHTML === 'string' && channel.descriptionHTML.length > 0
const shouldRenderFooter = hasDescription || hasSocialLinks
---

<div id="header-section">
  <div id="header">
    <a href={BASE_URL} title={channel?.title}>
      <img
        src={channel?.avatar?.startsWith('http') ? staticProxy + channel?.avatar : voidFile.src}
        alt={channel?.title}
        loading="eager"
        class="header-avatar"
      />
    </a>
    <div class="header-title">
      <a href={BASE_URL} class="site-title" title={channel?.title}>
        {channel?.title}
      </a>
    </div>
  </div>
</div>

{
  shouldRenderFooter && (
    <footer class="site-footer">
      {hasDescription && <div class="text-box site-intro site-intro--plain" set:html={channel?.descriptionHTML} />}
      {hasSocialLinks && (
        <div class="footer-icons">
          {socialLinks.map((link) => (
            <a href={link.href} title={link.alt} target="_blank" rel="noopener noreferrer" class="footer-icons__link">
              <img {...link.icon} alt={link.alt} class="social-icon" width="3em" loading="lazy" decoding="async" />
            </a>
          ))}
        </div>
      )}
    </footer>
  )
}
