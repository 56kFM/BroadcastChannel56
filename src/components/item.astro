---
import '../assets/item.css'
import 'prismjs/themes/prism.css'
import dayjs from '../lib/dayjs'
import { getEnv } from '../lib/env'

const locale = getEnv(import.meta.env, Astro, 'LOCALE')
const timezone = getEnv(import.meta.env, Astro, 'TIMEZONE')

locale && dayjs.locale(locale)

const { SITE_URL } = Astro.locals
const { post, isItem } = Astro.props

const channel = getEnv(import.meta.env, Astro, 'CHANNEL')
const COMMENTS = getEnv(import.meta.env, Astro, 'COMMENTS')

const datetime = dayjs(post.datetime).tz(timezone)
const timeago = datetime.isBefore(dayjs().subtract(1, 'w')) ? datetime.format('HH:mm · ll · ddd') : datetime.fromNow()
---

<div class="item" style={{ 'view-transition-name': `post-${post.id}` }}>
  <div class="item-content-container">
    <div class="time-box">
      <div class="time">
        <a href={`${SITE_URL}posts/${post.id}`} title={post.datetime} class="item-link">
          <time datetime={post.datetime} title={timeago}>{timeago}</time>
        </a>
      </div>
    </div>
    {post.content.length > 0 && <div class={`text-box content`} set:html={post.content} />}
  </div>
  {
    post.tags.length > 0 && (
      <div class="tag-box" style={post.content.length === 0 ? 'padding-top: 24px;' : ''}>
        <div class="tag-icon" />
        {post.tags.map((tag) => (
          <span class="tag">{tag}</span>
        ))}
      </div>
    )
  }

  {
    COMMENTS && isItem && (
      <div class="comments">
        <script
          is:inline
          async
          src="https://telegram.org/js/telegram-widget.js"
          data-telegram-discussion={`${channel}/${post.id}`}
          data-comments-limit="50"
          data-colorful="1"
          data-dark="1"
        />
      </div>
    )
  }
</div>

<script>
  const modalState = {
    activeModal: null,
    previousOverflow: '',
  }
  let keyHandlerAttached = false

  function closeModal(modal) {
    if (!modal) {
      return
    }

    modal.classList.remove('is-open')
    modal.setAttribute('aria-hidden', 'true')
    modal.hidden = true

    if (typeof modal.__resetZoom === 'function') {
      modal.__resetZoom()
    }

    if (modalState.activeModal === modal) {
      modalState.activeModal = null
    }

    if (!document.querySelector('.modal.is-open')) {
      if (document.body) {
        document.body.style.overflow = modalState.previousOverflow || ''
      }
      modalState.previousOverflow = ''
    }

    const trigger = modal.__triggerElement
    if (trigger && typeof trigger.focus === 'function') {
      trigger.focus({ preventScroll: true })
    }
    if (trigger && trigger.hasAttribute('aria-expanded')) {
      trigger.setAttribute('aria-expanded', 'false')
    }
    modal.__triggerElement = null
  }

  function openModal(modal, trigger) {
    if (!modal) {
      return
    }

    if (modalState.activeModal && modalState.activeModal !== modal) {
      closeModal(modalState.activeModal)
    }

    modal.__triggerElement = trigger || null
    if (trigger && trigger.hasAttribute('aria-expanded')) {
      trigger.setAttribute('aria-expanded', 'true')
    }
    modal.hidden = false
    modal.classList.add('is-open')
    modal.setAttribute('aria-hidden', 'false')
    modalState.activeModal = modal
    if (document.body) {
      modalState.previousOverflow = document.body.style.overflow || ''
      document.body.style.overflow = 'hidden'
    }

    const focusTarget = modal.querySelector('[data-modal-close]')
    focusTarget?.focus({ preventScroll: true })
  }

  function handleKeydown(event) {
    if (event.key === 'Escape' && modalState.activeModal) {
      closeModal(modalState.activeModal)
    }
  }

  function enhanceImageModals() {
    const modals = document.querySelectorAll('.modal')
    modals.forEach((modal) => {
      if (modal.dataset.modalEnhanced === 'true') {
        return
      }

      const content = modal.querySelector('.modal-content')
      const image = modal.querySelector('.modal-img')

      if (!content || !image) {
        return
      }

      modal.dataset.modalEnhanced = 'true'

      let scale = 1
      const maxScale = 6

      const updateZoom = () => {
        if (scale <= 1) {
          scale = 1
          image.dataset.zoomed = 'false'
          image.style.transform = ''
          content.classList.remove('is-zoomed')
          return
        }

        image.dataset.zoomed = 'true'
        image.style.transform = `scale(${scale})`
        content.classList.add('is-zoomed')
      }

      const resetZoom = () => {
        scale = 1
        updateZoom()
        content.scrollTop = 0
        content.scrollLeft = 0
      }

      const toggleZoom = () => {
        if (image.dataset.zoomed === 'true') {
          resetZoom()
          return
        }

        const naturalScale = image.naturalWidth && image.clientWidth ? image.naturalWidth / image.clientWidth : 1
        scale = Math.max(1.5, naturalScale)
        scale = Math.min(maxScale, scale)
        updateZoom()
      }

      image.addEventListener('click', (event) => {
        event.preventDefault()
        event.stopPropagation()
        toggleZoom()
      })

      image.addEventListener('load', () => {
        scale = 1
        updateZoom()
      })

      content.addEventListener(
        'wheel',
        (event) => {
          if (!event.ctrlKey && image.dataset.zoomed !== 'true') {
            return
          }

          event.preventDefault()
          const delta = event.deltaY > 0 ? -1 : 1
          scale += delta * 0.2 * Math.max(scale, 1)
          scale = Math.min(maxScale, Math.max(1, scale))
          updateZoom()
        },
        { passive: false },
      )

      const closeElements = modal.querySelectorAll('[data-close], [data-modal-close]')
      closeElements.forEach((element) => {
        element.addEventListener('click', () => {
          closeModal(modal)
        })
      })

      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          closeModal(modal)
        }
      })

      modal.__resetZoom = resetZoom
    })

    document.querySelectorAll('[data-modal-open]').forEach((trigger) => {
      if (trigger.dataset.modalTriggerEnhanced === 'true') {
        return
      }

      const modalId = trigger.getAttribute('data-modal-open')
      if (!modalId) {
        return
      }

      const modal = document.getElementById(modalId)
      if (!modal) {
        return
      }

      if (!trigger.hasAttribute('aria-expanded')) {
        trigger.setAttribute('aria-expanded', 'false')
      }

      trigger.dataset.modalTriggerEnhanced = 'true'
      trigger.addEventListener('click', (event) => {
        event.preventDefault()
        openModal(modal, trigger)
      })
    })

    if (!keyHandlerAttached) {
      window.addEventListener('keydown', handleKeydown)
      keyHandlerAttached = true
    }
  }

  function scheduleImageModalEnhancement() {
    window.requestAnimationFrame(enhanceImageModals)
  }

  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', scheduleImageModalEnhancement, { once: true })
    }

    if (document.readyState !== 'loading') {
      scheduleImageModalEnhancement()
    }

    document.addEventListener('astro:page-load', scheduleImageModalEnhancement)
    document.addEventListener('astro:after-swap', scheduleImageModalEnhancement)
  }
</script>
