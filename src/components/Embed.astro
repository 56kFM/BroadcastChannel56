---
import { resolveEmbed } from '../lib/embeds'
import { sanitizeHTML } from '../utils/sanitizeHTML'

const { url, oembedHtml } = Astro.props as { url: string; oembedHtml?: string }

const fromLoader = oembedHtml ? { html: oembedHtml } : null

let resolved = fromLoader ?? null
let embedError: Error | null = null

if (!resolved) {
  try {
    resolved = resolveEmbed(url)
  } catch (error) {
    embedError = error instanceof Error ? error : new Error('Failed to resolve embed')
    if (import.meta.env.DEV) {
      console.warn('Failed to resolve embed', { url, error: embedError })
    }
    resolved = null
  }
}

const rawHtml = typeof resolved?.html === 'string' ? resolved.html : null

const isSoundCloudPlaceholder =
  !fromLoader && typeof rawHtml === 'string' && rawHtml.startsWith('<!-- SOUNDCloud_OEMBED')

const sanitizedHtml = rawHtml ? sanitizeHTML(rawHtml) : null
---

{
  sanitizedHtml && !isSoundCloudPlaceholder ? (
    <Fragment set:html={sanitizedHtml} />
  ) : (
    <a href={url} rel="noopener noreferrer nofollow ugc">
      {url}
    </a>
  )
}
