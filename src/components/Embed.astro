---
import { resolveEmbed } from '../lib/embeds'

const DEBUG_EMBEDS = import.meta.env.DEBUG_EMBEDS === '1'
const EMBEDS_DEBUG_GLOBAL_KEY = '__embedsDebugLogged'
const globalEmbedDebugState = globalThis as Record<string, unknown>
const hasLoggedFirstEmbed = Boolean(globalEmbedDebugState[EMBEDS_DEBUG_GLOBAL_KEY])

const { url, oembedHtml } = Astro.props as { url: string; oembedHtml?: string }

const fromLoader = oembedHtml ? { html: oembedHtml } : null

let resolved = fromLoader ?? null
let embedError: Error | null = null

if (!resolved) {
  try {
    resolved = resolveEmbed(url)
  } catch (error) {
    embedError = error instanceof Error ? error : new Error('Failed to resolve embed')
    if (import.meta.env.DEV) {
      console.warn('Failed to resolve embed', { url, error: embedError })
    }
    resolved = null
  }
}

const isSoundCloudPlaceholder =
  !fromLoader && typeof resolved?.html === 'string' && resolved.html.startsWith('<!-- SOUNDCloud_OEMBED')

if (DEBUG_EMBEDS && !hasLoggedFirstEmbed && resolved && !isSoundCloudPlaceholder && typeof resolved.html === 'string') {
  console.warn('[Embeds] First 500 chars before render:', resolved.html.slice(0, 500))
  globalEmbedDebugState[EMBEDS_DEBUG_GLOBAL_KEY] = true
}
---

{
  resolved && !isSoundCloudPlaceholder ? (
    <Fragment set:html={resolved.html} />
  ) : (
    <a href={url} rel="noopener nofollow ugc">
      {url}
    </a>
  )
}
