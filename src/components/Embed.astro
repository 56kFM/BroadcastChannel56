---
import { resolveEmbed } from '../lib/embed/resolve'
import type { EmbedDescriptor } from '../lib/embed/types'
import OEmbedCard from './embed/OEmbedCard.astro'
import LinkPreviewCard from './embed/LinkPreviewCard.astro'
import YouTubeEmbed from './embed/providers/YouTubeEmbed.astro'
import BandcampEmbed from './embed/providers/BandcampEmbed.astro'
import SpotifyEmbed from './embed/providers/SpotifyEmbed.astro'
import AppleMusicEmbed from './embed/providers/AppleMusicEmbed.astro'

const { url } = Astro.props as { url: string }

const componentMap: Record<string, any> = {
  YouTubeEmbed,
  BandcampEmbed,
  SpotifyEmbed,
  AppleMusicEmbed,
}

let descriptor: EmbedDescriptor | null = null
let resolveError: Error | null = null

try {
  descriptor = await resolveEmbed(url)
} catch (error) {
  resolveError = error instanceof Error ? error : new Error('Failed to resolve embed')
  if (import.meta.env.DEV) {
    console.warn('Failed to resolve embed', { url, error: resolveError })
  }
  descriptor = null
}

const isInternal = /^(?:\/(?!\/)|\.\/|\.\.\/|#)/u.test(url)

let FirstClassComponent: any = null
if (descriptor?.kind === 'first-class') {
  FirstClassComponent = componentMap[descriptor.component]
}

const fallbackLink = (
  <a
    href={url}
    rel={isInternal ? undefined : 'noopener noreferrer nofollow ugc'}
    target={isInternal ? undefined : '_blank'}
  >
    {url}
  </a>
)
---

{
  descriptor ? (
    descriptor.kind === 'first-class' ? (
      FirstClassComponent ? (
        <FirstClassComponent {...descriptor.props} />
      ) : (
        fallbackLink
      )
    ) : descriptor.kind === 'oembed' ? (
      <OEmbedCard {...descriptor} />
    ) : descriptor.kind === 'og-card' ? (
      <LinkPreviewCard url={descriptor.url} meta={descriptor.meta} />
    ) : (
      fallbackLink
    )
  ) : (
    fallbackLink
  )
}
