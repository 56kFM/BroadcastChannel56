---
/** Lightweight, server-side Open Graph preview.
 * Accepts only a URL; fetches OG/Twitter tags at build/SSR time.
 */
const { url } = Astro.props as { url: string }

let meta: { title?: string; description?: string; image?: string; site_name?: string } = {}
let host = ''
try {
  const u = new URL(url)
  host = u.hostname
} catch {}

try {
  const res = await fetch(url, { redirect: 'follow' })
  if (res.ok) {
    const html = await res.text()
    // very small OG parser (no cheerio dependency)
    const pick = (name: string) => {
      const re = new RegExp(`<meta[^>]+property=["']${name}["'][^>]+content=["']([^"']+)["']`, 'i')
      const m = html.match(re)
      return m ? m[1] : undefined
    }
    meta.title = pick('og:title') || html.match(/<title[^>]*>([^<]+)<\/title>/i)?.[1]
    meta.description =
      pick('og:description') || html.match(/<meta[^>]+name=["']description["'][^>]+content=["']([^"']+)["']/i)?.[1]
    meta.image = pick('og:image')
    meta.site_name = pick('og:site_name') || host
  }
} catch {}
---

<a href={url} target="_blank" rel="noopener noreferrer" class="block no-underline">
  <div
    style="display:flex;gap:.75rem;align-items:center;border:1px solid currentColor;border-radius:.5rem;padding:.75rem;"
  >
    {
      meta?.image && (
        <img src={meta.image} alt="" width="64" height="64" style="object-fit:cover;border-radius:.25rem;" />
      )
    }
    <div>
      {meta?.title && <div style="font-weight:600;line-height:1.2">{meta.title}</div>}
      <div style="opacity:.7;font-size:.875rem">{meta?.site_name || host}</div>
      {
        meta?.description && (
          <div style="opacity:.7;font-size:.875rem;margin-top:.25rem;line-height:1.3">{meta.description}</div>
        )
      }
    </div>
  </div>
</a>
