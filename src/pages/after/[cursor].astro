---
import List from '../../components/list.astro'
import { normalizeCursorParam } from '../../lib/cursor'
import { getChannelInfo } from '../../lib/telegram'

const cursor = normalizeCursorParam(Astro.params.cursor)

if (!cursor) {
  return Astro.redirect('/')
}

/* CURSOR_FETCH_START */
const channel = await getChannelInfo(Astro, { navigateFrom: cursor, direction: 'newer' })
/* CURSOR_FETCH_END */

// If Telegram returns no posts for this cursor, wrap to the OLDEST post
if (!Array.isArray(channel?.posts) || channel.posts.length === 0) {
  const { BASE_URL } = Astro.locals
  const base = typeof BASE_URL === 'string' && BASE_URL.length > 0 ? BASE_URL : '/'

  // Ask Telegram for the earliest window by anchoring near the beginning.
  // Using after:'1' yields the earliest page; pick the min id from that.
  const earliest = await getChannelInfo(Astro, { after: '1' })
  const ids = Array.isArray(earliest?.posts)
    ? earliest.posts.map((p) => Number.parseInt(p?.id ?? '', 10)).filter((n) => Number.isFinite(n))
    : []

  const oldestId = ids.length ? String(Math.min(...ids)) : ''
  const target = oldestId ? `${base}posts/${encodeURIComponent(oldestId)}` : base
  return Astro.redirect(target)
}

const post = channel?.posts?.[0]
const KIND_HOSTS: Record<string, string[]> = {
  youtube: ['www.youtube-nocookie.com', 'www.youtube.com', 'youtu.be'],
  vimeo: ['player.vimeo.com'],
  soundcloud: ['w.soundcloud.com'],
  spotify: ['open.spotify.com'],
  apple: ['embed.music.apple.com'],
  bandcamp: ['bandcamp.com'],
}
const used = new Set<string>()
if (post?.embeds) {
  for (const e of post.embeds) {
    const hs = KIND_HOSTS[e?.kind as string]
    if (hs) hs.forEach((h) => used.add(h))
    else if (e?.url) {
      try {
        used.add(new URL(e.url).hostname)
      } catch {}
    }
  }
}
const preconnectHosts = Array.from(used)

channel.seo = {
  noindex: true,
}
---

<Fragment slot="head">
  {
    preconnectHosts.map((h) => (
      <>
        <link rel="preconnect" href={'https://' + h} crossorigin />
        <link rel="dns-prefetch" href={'//' + h} />
      </>
    ))
  }
</Fragment>

<List channel={channel} isItem={true} paginationGap={true} />
