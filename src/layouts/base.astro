---
import '../assets/normalize.css'
import '../assets/style.css'
import '../assets/global.css'
import { SEO } from 'astro-seo'
import { getEnv } from '../lib/env'
import backToTopIcon from '../assets/back-to-top.svg'

const { SITE_URL, RSS_URL } = Astro.locals
const { channel } = Astro.props

const locale = getEnv(import.meta.env, Astro, 'LOCALE')

const seo = channel?.seo
const reqPathname = Astro.url.pathname.replace(/\/$/, '')
const canonical = SITE_URL.startsWith('http') ? new URL(SITE_URL).origin + reqPathname : Astro.url.origin + reqPathname

const { origin } = new URL(canonical)
const github = getEnv(import.meta.env, Astro, 'GITHUB')

const seoParams = {
  title: seo?.title,
  description: seo?.text ?? channel?.description,
  canonical,
  noindex: seo?.noindex ?? getEnv(import.meta.env, Astro, 'NOINDEX'),
  nofollow: seo?.nofollow ?? getEnv(import.meta.env, Astro, 'NOFOLLOW'),
  openGraph: {
    basic: {
      type: 'website',
      title: channel?.title ?? '',
      url: canonical,
      image: channel?.avatar ? channel.avatar : origin + '/favicon.ico',
    },
    optional: {
      description: seo?.text ?? channel?.description,
      locale,
    },
  },
  extend: {
    link: [
      {
        rel: 'icon',
        href: channel?.avatar
          ? `https://wsrv.nl/?w=64&h=64&fit=cover&mask=circle&url=ssl:${channel?.avatar?.replace(/^https?:\/\//, '')}`
          : '/favicon.svg',
      },
    ],
  },
}

const HEADER_INJECT = getEnv(import.meta.env, Astro, 'HEADER_INJECT')
const FOOTER_INJECT = getEnv(import.meta.env, Astro, 'FOOTER_INJECT')

const hasHeader = Astro.slots.has('header')
---

<!doctype html>
<html lang={locale ?? 'en'}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#0d0d0d" />
    <link rel="alternate" type="application/rss+xml" title={channel?.title} href={RSS_URL} />
    <style is:inline>
      @view-transition {
        navigation: auto;
      }
    </style>
    <SEO
      titleTemplate={`%s | ${channel?.title}`}
      titleDefault={[channel?.title, seoParams.description].filter(Boolean).join(' - ')}
      {...seoParams}
    />
    <Fragment set:html={HEADER_INJECT} />
  </head>

  <body>
    <div id="wrapper">
      {
        hasHeader && (
          <header id="header-container">
            <slot name="header" />
          </header>
        )
      }
      <main id="main-container">
        <slot />
      </main>
    </div>
    <a href="#wrapper" id="back-to-top" aria-label="Back to top">
      <img {...backToTopIcon} alt="Back to Top" />
    </a>
    <script is:inline>
      const backToTop = document.getElementById('back-to-top')

      if (backToTop) {
        const prefersReducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)')

        const toggleBackToTopVisibility = () => {
          const shouldShow = window.scrollY > window.innerHeight * 0.5

          backToTop.classList.toggle('is-visible', shouldShow)

          if (shouldShow && backToTop.dataset.fallback !== 'true') {
            const computed = getComputedStyle(backToTop)
            const isInteractive = computed.pointerEvents !== 'none' && Number.parseFloat(computed.opacity) > 0

            if (!isInteractive) {
              backToTop.dataset.fallback = 'true'
              requestAnimationFrame(() => {
                toggleBackToTopVisibility()
              })
            }
          }
        }

        const shouldDisableAnimation = [
          typeof CSS === 'undefined',
          typeof CSS.supports !== 'function',
          !CSS.supports('animation-timeline: view(block 0 100vh)'),
          prefersReducedMotionQuery.matches,
        ].some(Boolean)

        if (shouldDisableAnimation) {
          backToTop.dataset.fallback = 'true'
        }

        if (!shouldDisableAnimation) {
          const handlePreferenceChange = (event) => {
            if (event.matches) {
              backToTop.dataset.fallback = 'true'
              prefersReducedMotionQuery.removeEventListener('change', handlePreferenceChange)
              toggleBackToTopVisibility()
            }
          }

          prefersReducedMotionQuery.addEventListener('change', handlePreferenceChange)
        }

        toggleBackToTopVisibility()
        window.addEventListener('scroll', toggleBackToTopVisibility, { passive: true })
        window.addEventListener('resize', toggleBackToTopVisibility)

        backToTop.addEventListener('click', (event) => {
          if (event.defaultPrevented) {
            return
          }

          event.preventDefault()

          const target = document.getElementById('wrapper')
          const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches

          if (target?.scrollIntoView) {
            target.scrollIntoView({
              behavior: prefersReducedMotion ? 'auto' : 'smooth',
              block: 'start',
            })
            return
          }

          window.scrollTo({
            top: 0,
            behavior: prefersReducedMotion ? 'auto' : 'smooth',
          })
        })
      }
    </script>
    <Fragment set:html={FOOTER_INJECT} />
  </body>
</html>
